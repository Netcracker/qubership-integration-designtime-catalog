{
  "openapi": "3.1.0",
  "info": {
    "title": "Qubership Integration Platform Design Time Catalog",
    "description": "REST API of Qubership Integration Platform Design Time Catalog microservice",
    "version": "v1",
    "x-api-kind": "no-bwc"
  },
  "servers": [
    {
      "url": "/"
    }
  ],
  "tags": [
    {
      "name": "chain-controller",
      "description": "Chain Controller"
    },
    {
      "name": "actions-log-controller",
      "description": "Actions Log Controller"
    },
    {
      "name": "masked-fields-controller",
      "description": "Masked Fields Controller"
    },
    {
      "name": "element-controller",
      "description": "Element Controller"
    },
    {
      "name": "import-instructions-controller",
      "description": "Import Instructions Controller"
    },
    {
      "name": "chain-design-controller",
      "description": "Chain Design Controller"
    },
    {
      "name": "system-model-controller",
      "description": "System Model Controller"
    },
    {
      "name": "dependency-controller",
      "description": "Dependency Controller"
    },
    {
      "name": "environment-controller",
      "description": "Environment Controller"
    },
    {
      "name": "system-controller",
      "description": "System Controller"
    },
    {
      "name": "discovery-controller",
      "description": "Discovery Controller"
    },
    {
      "name": "element-modification-controller",
      "description": "Element Modification Controller"
    },
    {
      "name": "detailed-design-controller",
      "description": "Detailed Design Controller"
    },
    {
      "name": "specification-group-controller",
      "description": "Specification Group Controller"
    },
    {
      "name": "logging-properties-controller",
      "description": "Logging Properties Controller"
    },
    {
      "name": "folder-controller",
      "description": "Folder Controller"
    },
    {
      "name": "actions-log-export-controller",
      "description": "Actions Log Export Controller"
    },
    {
      "name": "operation-controller",
      "description": "Operation Controller"
    },
    {
      "name": "element-library-controller",
      "description": "Element Library Controller"
    }
  ],
  "paths": {
    "/v1/systems/{systemId}": {
      "get": {
        "tags": [
          "system-controller"
        ],
        "description": "Get specific service",
        "operationId": "getSystem",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "system-controller"
        ],
        "description": "Modify specified service",
        "operationId": "updateSystem",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "system-controller"
        ],
        "description": "Delete specified service",
        "operationId": "deleteSystem",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "system-controller"
        ],
        "description": "Partially update service",
        "operationId": "updateSyncStatus",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/systems/{systemId}/environments/{environmentId}": {
      "get": {
        "tags": [
          "environment-controller"
        ],
        "description": "Get specific environment from service",
        "operationId": "getEnvironment",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentId",
            "in": "path",
            "description": "Environment id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "environment-controller"
        ],
        "description": "Update existing environment of a service",
        "operationId": "updateEnvironment",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentId",
            "in": "path",
            "description": "Environment id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "environment-controller"
        ],
        "description": "Delete existing environment",
        "operationId": "deleteEnvironment",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentId",
            "in": "path",
            "description": "Environment id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/folders/{folderId}": {
      "get": {
        "tags": [
          "folder-controller"
        ],
        "description": "Get specific folder",
        "operationId": "findById",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Content filter object for a folder item request",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/FolderContentFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "folder-controller"
        ],
        "description": "Update specified folder",
        "operationId": "update",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "folder-controller"
        ],
        "description": "Delete specified folder",
        "operationId": "deleteByIdIn",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/detailed-design/templates": {
      "get": {
        "tags": [
          "detailed-design-controller"
        ],
        "description": "Get all detailed design templates",
        "operationId": "getTemplates",
        "parameters": [
          {
            "name": "includeContent",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DDSTemplateResponse"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "detailed-design-controller"
        ],
        "description": "Create detailed design template",
        "operationId": "createTemplate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DDSTemplateCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DDSTemplateResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "detailed-design-controller"
        ],
        "description": "Delete detailed design template",
        "operationId": "deleteTemplates",
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/chains/{chainId}": {
      "get": {
        "tags": [
          "chain-controller"
        ],
        "description": "Find chain with its elements",
        "operationId": "findById_1",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainDTO"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "chain-controller"
        ],
        "description": "Update existing chain",
        "operationId": "update_1",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChainRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "chain-controller"
        ],
        "description": "Delete chain",
        "operationId": "deleteById",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "head": {
        "tags": [
          "chain-controller"
        ],
        "description": "Find chain by id if it exists",
        "operationId": "findExistingChain",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chain"
                }
              }
            }
          }
        },
        "x-api-kind": "bwc"
      }
    },
    "/v1/chains/{chainId}/masking/field/{fieldId}": {
      "put": {
        "tags": [
          "masked-fields-controller"
        ],
        "description": "Update specified masked field in a chain",
        "operationId": "updateField",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "Masked field id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaskedFieldDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MaskedFieldDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "masked-fields-controller"
        ],
        "description": "Delete specified masked field from a chain",
        "operationId": "deleteField",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "fieldId",
            "in": "path",
            "description": "Masked field id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/chains/{chainId}/elements/properties-modification": {
      "put": {
        "tags": [
          "element-modification-controller"
        ],
        "description": "Change specified http triggers type to implemented with specified specification group",
        "operationId": "modifyHttpTriggerProperties",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "specificationGroupId",
            "in": "query",
            "description": "Specification group id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "httpTriggerIds",
            "in": "query",
            "description": "List of http trigger elements separated by comma",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/systems": {
      "get": {
        "tags": [
          "system-controller"
        ],
        "description": "Get all services",
        "operationId": "getSystems",
        "parameters": [
          {
            "name": "modelType",
            "in": "query",
            "description": "Filter services by type. If \"all\" specified - nothing will be excluded from the response.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "withSpec",
            "in": "query",
            "description": "Whether response will include specifications",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "system-controller"
        ],
        "description": "Create service",
        "operationId": "createSystem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SystemDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/systems/{systemId}/environments": {
      "get": {
        "tags": [
          "environment-controller"
        ],
        "description": "Get all environments for specified service",
        "operationId": "getEnvironments",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "environment-controller"
        ],
        "description": "Create new environment for a service",
        "operationId": "createEnvironment",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EnvironmentRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/systems/search": {
      "post": {
        "tags": [
          "system-controller"
        ],
        "description": "Search services request",
        "operationId": "searchSystems",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemSearchRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/systems/filter": {
      "post": {
        "tags": [
          "system-controller"
        ],
        "description": "Filter services request",
        "operationId": "filterSystems",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Service filter request object",
                "items": {
                  "$ref": "#/components/schemas/FilterRequestDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/systems/discovery": {
      "get": {
        "tags": [
          "discovery-controller"
        ],
        "description": "Get all currently discovered services",
        "operationId": "getServices",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DiscoveredServiceDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "discovery-controller"
        ],
        "description": "Initiate discovery process on a current environment",
        "operationId": "runDiscovery",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/v1/specificationGroups": {
      "get": {
        "tags": [
          "specification-group-controller"
        ],
        "description": "Get all specification groups for specified service",
        "operationId": "getSpecificationGroups",
        "parameters": [
          {
            "name": "systemId",
            "in": "query",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SpecificationGroupDTO"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "specification-group-controller"
        ],
        "description": "Create specification group",
        "operationId": "createSpecificationGroup",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpecificationGroupCreationRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/SpecificationGroupDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/models/deprecated": {
      "post": {
        "tags": [
          "system-model-controller"
        ],
        "description": "Make specification deprecated request",
        "operationId": "makeSystemModelDeprecated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string",
                "description": "Specification id"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemModelDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/import-instructions": {
      "get": {
        "tags": [
          "import-instructions-controller"
        ],
        "description": "Get all import instructions",
        "operationId": "getImportInstructions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralImportInstructionsDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "import-instructions-controller"
        ],
        "description": "Create new import instruction",
        "operationId": "addImportInstruction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportInstructionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportInstructionDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "import-instructions-controller"
        ],
        "description": "Delete import instructions",
        "operationId": "deleteImportInstructions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteInstructionsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "import-instructions-controller"
        ],
        "description": "Update existing import instruction",
        "operationId": "updateImportInstructionsConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportInstructionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportInstructionDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/import-instructions/search": {
      "post": {
        "tags": [
          "import-instructions-controller"
        ],
        "description": "Search for import instructions",
        "operationId": "searchImportInstructions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportInstructionsSearchRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralImportInstructionsDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/import-instructions/filter": {
      "post": {
        "tags": [
          "import-instructions-controller"
        ],
        "description": "Filter import instructions",
        "operationId": "filterImportInstructions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Import instructions filter request object",
                "items": {
                  "$ref": "#/components/schemas/FilterRequestDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneralImportInstructionsDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/folders": {
      "get": {
        "tags": [
          "folder-controller"
        ],
        "description": "Get root folder",
        "operationId": "findRootFolder",
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "description": "Content filter object for a folder item request",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/FolderContentFilter"
            }
          },
          {
            "name": "openedFolderId",
            "in": "query",
            "description": "Pre-opened folder (if specified, data for this folder will be fetched as well as root folder",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderItemResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "folder-controller"
        ],
        "description": "Create a new folder",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderItemRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/folders/{folderId}/move": {
      "post": {
        "tags": [
          "folder-controller"
        ],
        "description": "Move specified folder (change parent folder)",
        "operationId": "move",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetFolderId",
            "in": "query",
            "description": "Target parent folder id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/folders/search": {
      "post": {
        "tags": [
          "folder-controller"
        ],
        "description": "Search from root folder with chains",
        "operationId": "searchRootFolderWithChains",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChainSearchRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderItemResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/folders/filter": {
      "post": {
        "tags": [
          "folder-controller"
        ],
        "description": "Filter from root folder with chains",
        "operationId": "filterRootFolderWithChains",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Folder filter request object",
                "items": {
                  "$ref": "#/components/schemas/FilterRequestDTO"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderItemResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/design-generator/chains/{chainId}": {
      "get": {
        "tags": [
          "chain-design-controller"
        ],
        "description": "Generate chain sequence diagram",
        "operationId": "generateChainSequenceDiagram",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementsSequenceDiagram"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "chain-design-controller"
        ],
        "description": "Generate chain sequence diagrams",
        "operationId": "generateChainSequenceDiagrams",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateChainDesignRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ElementsSequenceDiagram"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/design-generator/chains/{chainId}/snapshots/{snapshotId}": {
      "get": {
        "tags": [
          "chain-design-controller"
        ],
        "description": "Generate chain sequence diagram from specified snapshot",
        "operationId": "generateSnapshotSequenceDiagram",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "Snapshot id of specified chain",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementsSequenceDiagram"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "chain-design-controller"
        ],
        "description": "Generate chain sequence diagrams from specified snapshot",
        "operationId": "generateSnapshotSequenceDiagrams",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "snapshotId",
            "in": "path",
            "description": "Snapshot id of specified chain",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateChainDesignRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/ElementsSequenceDiagram"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains": {
      "get": {
        "tags": [
          "chain-controller"
        ],
        "description": "Get list of all chains and folders without chain elements",
        "operationId": "findAllLight",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChainResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "chain-controller"
        ],
        "description": "Create a new chain",
        "operationId": "create_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChainRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/properties/logging": {
      "get": {
        "tags": [
          "logging-properties-controller"
        ],
        "description": "Get logging deployment properties for specified chain",
        "operationId": "findByChainId",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainLoggingPropertiesSet"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "logging-properties-controller"
        ],
        "description": "Save logging deployment properties for specified chain",
        "operationId": "saveProperties",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeploymentRuntimeProperties"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "logging-properties-controller"
        ],
        "description": "Remove custom logging properties for chain (make default)",
        "operationId": "deleteProperties",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/chains/{chainId}/move": {
      "post": {
        "tags": [
          "chain-controller"
        ],
        "description": "Move existing chain to a specified folder",
        "operationId": "move_1",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetFolderId",
            "in": "query",
            "description": "Target folder id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/masking": {
      "get": {
        "tags": [
          "masked-fields-controller"
        ],
        "description": "Get masked fields for specified chain",
        "operationId": "findByChainId_1",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MaskedFieldsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "masked-fields-controller"
        ],
        "description": "Create new masked field for specified chain",
        "operationId": "createField",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MaskedFieldDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/MaskedFieldDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/elements": {
      "get": {
        "tags": [
          "element-controller"
        ],
        "description": "Get all elements from the chain",
        "operationId": "getElementsByChainId",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "element-controller"
        ],
        "description": "Create element for the chain",
        "operationId": "createElement",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateElementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainDiffResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "element-controller"
        ],
        "description": "Delete specified elements from the chain",
        "operationId": "deleteElementsByIds",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "elementsIds",
            "in": "query",
            "description": "List of element ids separated by comma",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainDiffResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/elements/transfer": {
      "post": {
        "tags": [
          "element-controller"
        ],
        "description": "Move element from one container and/or swimlane to another",
        "operationId": "transferElement",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransferElementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainDiffResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/elements/groups": {
      "post": {
        "tags": [
          "element-controller"
        ],
        "description": "Wrap specific elements from the chain into a group container",
        "operationId": "createGroup",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Element ids of the chain separated by comma",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/elements/code": {
      "get": {
        "tags": [
          "element-controller"
        ],
        "description": "Get all elements from the chain in code representation for end-user",
        "operationId": "getElementsAsCode",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementsCodeDTO"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "element-controller"
        ],
        "description": "Save all elements from the chain in code representation",
        "operationId": "saveElementsFromCode",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ElementsCodeDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementResponse"
                  }
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/chains/{chainId}/elements/clone": {
      "post": {
        "tags": [
          "element-controller"
        ],
        "description": "Copy specified elements to a specified container",
        "operationId": "cloneElements",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "Copy element requests",
                "items": {
                  "$ref": "#/components/schemas/CloneElementRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/duplicate": {
      "post": {
        "tags": [
          "chain-controller"
        ],
        "description": "Copy existing chain to the same folder",
        "operationId": "duplicate",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/dependencies": {
      "get": {
        "tags": [
          "dependency-controller"
        ],
        "description": "Find all dependencies by chain",
        "operationId": "findAllByChainId",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DependencyResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "dependency-controller"
        ],
        "description": "Create new dependency for the chain",
        "operationId": "create_2",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DependencyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainDiffResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dependency-controller"
        ],
        "description": "Delete specified dependencies in the chain",
        "operationId": "deleteByIds",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dependenciesIds",
            "in": "query",
            "description": "Dependency ids separated by comma",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainDiffResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/copy": {
      "post": {
        "tags": [
          "chain-controller"
        ],
        "description": "Copy existing chain to a specified folder",
        "operationId": "copy",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "targetFolderId",
            "in": "query",
            "description": "Target folder id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/diff": {
      "post": {
        "tags": [
          "chain-controller"
        ],
        "description": "Find differences between chains/snapshots",
        "operationId": "difference",
        "requestBody": {
          "description": "Chain difference request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChainDifferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntityDifferenceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actions-log": {
      "post": {
        "tags": [
          "actions-log-controller"
        ],
        "description": "Get action logs",
        "operationId": "findBySearchRequest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActionLogSearchCriteria"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionLogResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/specificationGroups/{specificationGroupId}": {
      "delete": {
        "tags": [
          "specification-group-controller"
        ],
        "description": "Delete specification group",
        "operationId": "deleteSpecificationGroup",
        "parameters": [
          {
            "name": "specificationGroupId",
            "in": "path",
            "description": "Specification group id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "specification-group-controller"
        ],
        "description": "Update synchronization toggle on a specification group",
        "operationId": "updateSyncStatus_1",
        "parameters": [
          {
            "name": "specificationGroupId",
            "in": "path",
            "description": "Specification group id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SpecificationGroupRequestDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SpecificationGroupDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/models/{modelId}": {
      "get": {
        "tags": [
          "system-model-controller"
        ],
        "description": "Get specific specification",
        "operationId": "getSystemModel",
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "description": "Specification id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemModelDTO"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "system-model-controller"
        ],
        "description": "Delete specification",
        "operationId": "deleteSystemModel",
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "description": "Specification id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "patch": {
        "tags": [
          "system-model-controller"
        ],
        "description": "Partially update specification",
        "operationId": "partiallyUpdateSystemModel",
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "description": "Specification id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemModelDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemModelDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/migrate": {
      "patch": {
        "tags": [
          "chain-controller"
        ],
        "description": "Initiate migrate process for a chain to replace old deprecated elements with new ones",
        "operationId": "migrate",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigratedChainDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/elements/{elementId}": {
      "get": {
        "tags": [
          "element-controller"
        ],
        "description": "Get specific element from the chain",
        "operationId": "findElementById",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Element id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "element-controller"
        ],
        "description": "Delete specific element from the chain",
        "operationId": "deleteElementById",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Element id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainDiffResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": [
          "element-controller"
        ],
        "description": "Change element in the chain",
        "operationId": "patchElement",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "elementId",
            "in": "path",
            "description": "Element id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchElementRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainDiffResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/systems/discovery/result": {
      "get": {
        "tags": [
          "discovery-controller"
        ],
        "description": "Get result of a discovery process initiated earlier",
        "operationId": "getDiscoveryResult",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DiscoveryResultDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/systems/discovery/progress": {
      "get": {
        "tags": [
          "discovery-controller"
        ],
        "description": "Get status of a discovery process initiated earlier",
        "operationId": "getDiscoveryProgress",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/operations": {
      "get": {
        "tags": [
          "operation-controller"
        ],
        "description": "Get list of operations from specification",
        "operationId": "getOperationsByModel",
        "parameters": [
          {
            "name": "modelId",
            "in": "query",
            "description": "Specification id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Which entity order number should we start from",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "count",
            "in": "query",
            "description": "Amount of entities received at a time",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "searchFilter",
            "in": "query",
            "description": "Search value",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "sortColumns",
            "in": "query",
            "description": "Column names which will be used to sort response, separated by comma",
            "required": false,
            "schema": {
              "type": "array",
              "default": [
                "path",
                "method",
                "name"
              ],
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OperationDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/operations/{operationId}": {
      "get": {
        "tags": [
          "operation-controller"
        ],
        "description": "Get specific operation",
        "operationId": "getOperation",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/operations/{operationId}/specification": {
      "get": {
        "tags": [
          "operation-controller"
        ],
        "description": "Get specification part related to specified operation",
        "operationId": "getSpecification",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/v1/operations/{operationId}/schemas": {
      "get": {
        "tags": [
          "operation-controller"
        ],
        "description": "Get specific operation with schemas",
        "operationId": "getOperationWithSchemas",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "If \"light\" was passed - response will be without part of request and response schemas. Otherwise all data will be included in response.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "light"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/v1/operations/{operationId}/schemas/response": {
      "get": {
        "tags": [
          "operation-controller"
        ],
        "description": "Get response schema from specification related to specified operation",
        "operationId": "getOperationResponseSchema",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentType",
            "in": "query",
            "description": "Content-type for schema",
            "required": false,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          },
          {
            "name": "responseCode",
            "in": "query",
            "description": "Response code for schema",
            "required": false,
            "schema": {
              "type": "string",
              "default": "200"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonNode"
                }
              }
            }
          }
        }
      }
    },
    "/v1/operations/{operationId}/schemas/request": {
      "get": {
        "tags": [
          "operation-controller"
        ],
        "description": "Get request schema from specification related to specified operation",
        "operationId": "getOperationRequestSchema",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentType",
            "in": "query",
            "description": "Content-type for schema",
            "required": false,
            "schema": {
              "type": "string",
              "default": "application/json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonNode"
                }
              }
            }
          }
        }
      }
    },
    "/v1/operations/{operationId}/info": {
      "get": {
        "tags": [
          "operation-controller"
        ],
        "description": "Get specific operation info",
        "operationId": "getInfo",
        "parameters": [
          {
            "name": "operationId",
            "in": "path",
            "description": "Operation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationInfoDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/models": {
      "get": {
        "tags": [
          "system-model-controller"
        ],
        "description": "Get all specifications",
        "operationId": "getModels",
        "parameters": [
          {
            "name": "specificationGroupId",
            "in": "query",
            "description": "Filter response by specification group id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "systemId",
            "in": "query",
            "description": "Filter response by service id",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SystemModelDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/models/{modelId}/source": {
      "get": {
        "tags": [
          "system-model-controller"
        ],
        "description": "Get raw contents of specification source",
        "operationId": "getSystemModelSource",
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "description": "Specification id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/models/latest": {
      "get": {
        "tags": [
          "system-model-controller"
        ],
        "description": "Get latest created specification in specified service",
        "operationId": "getLatestSystemModel",
        "parameters": [
          {
            "name": "systemId",
            "in": "query",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemModelDTO"
                }
              }
            }
          }
        }
      }
    },
    "/v1/library": {
      "get": {
        "tags": [
          "element-library-controller"
        ],
        "description": "Get all library elements (descriptors)",
        "operationId": "getElementsHierarchy",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryElements"
                }
              }
            }
          }
        }
      }
    },
    "/v1/library/{name}": {
      "get": {
        "tags": [
          "element-library-controller"
        ],
        "description": "Get library element by it's inner type name",
        "operationId": "getLibraryElement",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Inner type name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ElementDescriptor"
                }
              }
            }
          }
        }
      }
    },
    "/v1/library/elements/types": {
      "get": {
        "tags": [
          "element-library-controller"
        ],
        "description": "Find all library elements inner types and title names",
        "operationId": "findAllUsingElementsTypes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementsFilterDTO"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/folders/{folderId}/elements": {
      "get": {
        "tags": [
          "folder-controller"
        ],
        "description": "Get nested chains and folders from specified folder",
        "operationId": "findNestedElements",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Content filter object for a folder item request",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/FolderContentFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FolderItemResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/folders/{folderId}/chains": {
      "get": {
        "tags": [
          "folder-controller"
        ],
        "description": "Get nested chains from specified folder",
        "operationId": "findNestedChains",
        "parameters": [
          {
            "name": "folderId",
            "in": "path",
            "description": "Folder id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "in": "query",
            "description": "Content filter object for a folder item request",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/FolderContentFilter"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChainResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/detailed-design/templates/{templateId}": {
      "get": {
        "tags": [
          "detailed-design-controller"
        ],
        "description": "Get detailed design template by id",
        "operationId": "getTemplate",
        "parameters": [
          {
            "name": "templateId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DDSTemplateResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/detailed-design/chains/{chainId}": {
      "get": {
        "tags": [
          "detailed-design-controller"
        ],
        "description": "Get chain detailed design by chainId and templateId",
        "operationId": "getChainDesign",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DDSResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{systemId}/{operationId}": {
      "get": {
        "tags": [
          "chain-controller"
        ],
        "description": "Find chains (without elements) which elements is using specified service and operation",
        "operationId": "findBySystemIdAndOperationId",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "operationId",
            "in": "path",
            "description": "Specification operation id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChainResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{systemId}/specificationGroup": {
      "get": {
        "tags": [
          "chain-controller"
        ],
        "description": "Find chains (without elements) which elements is using specified service grouped by specification group",
        "operationId": "findBySystemIdGroupBySpecificationGroup",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChainsBySpecificationGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{systemId}/specificationGroup/{groupId}": {
      "get": {
        "tags": [
          "chain-controller"
        ],
        "description": "Find chains (without elements) which elements is using specified service and specification group",
        "operationId": "findBySystemIdAndSpecificationGroupId",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Specification group id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChainResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{systemId}/model/{modelId}": {
      "get": {
        "tags": [
          "chain-controller"
        ],
        "description": "Find chains (without elements) which elements is using specified service and specification",
        "operationId": "findBySystemIdAndModelId",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "modelId",
            "in": "path",
            "description": "Specification id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChainResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/elements/type/{type}": {
      "get": {
        "tags": [
          "element-controller"
        ],
        "description": "Get all elements of specific type",
        "operationId": "getElementsWithChainNameByType",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Inner element type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementWithChainNameResponse"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/elements/properties/used": {
      "get": {
        "tags": [
          "element-controller"
        ],
        "description": "Get used exchange properties in the chain",
        "operationId": "getElementsUsedProperties",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsedProperty"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/dependencies/{dependencyId}": {
      "get": {
        "tags": [
          "dependency-controller"
        ],
        "description": "Find specific dependency in the chain",
        "operationId": "findById_2",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dependencyId",
            "in": "path",
            "description": "Dependency id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DependencyResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "dependency-controller"
        ],
        "description": "Delete specific dependency in the chain",
        "operationId": "deleteById_1",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dependencyId",
            "in": "path",
            "description": "Dependency id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainDiffResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/chains/used-systems": {
      "get": {
        "tags": [
          "chain-controller"
        ],
        "description": "Get services and specifications used by specified chains",
        "operationId": "getUsedSystemIdsByChainIds",
        "parameters": [
          {
            "name": "chainIds",
            "in": "query",
            "description": "Chain ids separated by comma",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UsedSystem"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/systems/{systemId}": {
      "get": {
        "tags": [
          "chain-controller"
        ],
        "description": "Find chains (with or without elements) which elements is using specified service",
        "operationId": "findBySystemId",
        "parameters": [
          {
            "name": "systemId",
            "in": "path",
            "description": "Service id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "description": "If \"light\" was passed - response will be without chain elements. Otherwise elements will be included in response.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "light"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/names": {
      "get": {
        "tags": [
          "chain-controller"
        ],
        "description": "Get map of chain ids and related chain name",
        "operationId": "getNamesMapByChainIds",
        "parameters": [
          {
            "name": "chainIds",
            "in": "query",
            "description": "Chain ids separated by comma",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/count": {
      "get": {
        "tags": [
          "chain-controller"
        ],
        "description": "Get chains total count",
        "operationId": "getChainsTotalCount",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChainsCountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/actions-log/export": {
      "get": {
        "tags": [
          "actions-log-export-controller"
        ],
        "description": "Export action log as a file",
        "operationId": "export",
        "parameters": [
          {
            "name": "actionTimeFrom",
            "in": "query",
            "description": "Timestamp from",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "actionTimeTo",
            "in": "query",
            "description": "Timestamp to",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {

                }
              }
            }
          }
        }
      }
    },
    "/v1/chains/{chainId}/elements/groups/{groupId}": {
      "delete": {
        "tags": [
          "element-controller"
        ],
        "description": "Delete specified group container and ungroup element within it",
        "operationId": "ungroup",
        "parameters": [
          {
            "name": "chainId",
            "in": "path",
            "description": "Chain id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupId",
            "in": "path",
            "description": "Container group id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ElementResponse"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SystemLabelDTO": {
        "description": "Label response object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Label name"
          },
          "technical": {
            "type": "boolean",
            "description": "Whether label should be treated as technical"
          }
        }
      },
      "SystemRequestDTO": {
        "description": "Service modifying request object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name"
          },
          "type": {
            "type": "string",
            "description": "Service type",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "IMPLEMENTED"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "activeEnvironmentId": {
            "type": "string",
            "description": "Id of currently activated environment"
          },
          "labels": {
            "type": "array",
            "description": "Labels assigned to the service",
            "items": {
              "$ref": "#/components/schemas/SystemLabelDTO"
            }
          }
        }
      },
      "SystemDTO": {
        "description": "Service",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "type": {
            "type": "string",
            "description": "Service type",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "IMPLEMENTED"
            ]
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "activeEnvironmentId": {
            "type": "string",
            "description": "Id of currently activated environment"
          },
          "internalServiceName": {
            "type": "string",
            "description": "k8s network service name (if it is discovered service)"
          },
          "protocol": {
            "type": "string",
            "description": "Protocol"
          },
          "extendedProtocol": {
            "type": "string",
            "description": "Extended protocol (sub-type)"
          },
          "specification": {
            "type": "string",
            "description": "Protocol"
          },
          "labels": {
            "type": "array",
            "description": "Labels assigned to the service",
            "items": {
              "$ref": "#/components/schemas/SystemLabelDTO"
            }
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of creation date"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created entity"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of last modification date"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who last modified entity"
          }
        }
      },
      "UserDTO": {
        "description": "Response object for user entity",
        "properties": {
          "id": {
            "type": "string",
            "description": "User id"
          },
          "username": {
            "type": "string",
            "description": "User name"
          }
        }
      },
      "EnvironmentRequestDTO": {
        "description": "Request object for environment creation",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name"
          },
          "address": {
            "type": "string",
            "description": "Address (if service type is not MaaS"
          },
          "labels": {
            "type": "array",
            "description": "List of assigned labels",
            "items": {
              "type": "string",
              "description": "Environment label",
              "enum": [
                "DEVELOPMENT",
                "DEVELOPMENT1",
                "DEVELOPMENT2",
                "QA",
                "QA1",
                "QA2",
                "PRODUCTION",
                "PRODUCTION1",
                "PRODUCTION2",
                "STAGING",
                "STAGING1",
                "STAGING2",
                "SVT",
                "SVT1",
                "SVT2"
              ]
            }
          },
          "maasInstanceId": {
            "type": "string",
            "deprecated": true,
            "description": "MaaS instance id for deprecated MaaS data source type"
          },
          "properties": {
            "$ref": "#/components/schemas/JsonNode",
            "description": "Additional properties"
          },
          "sourceType": {
            "type": "string",
            "description": "Environment data source type",
            "enum": [
              "MANUAL",
              "MAAS",
              "MAAS_BY_CLASSIFIER"
            ]
          }
        }
      },
      "JsonNode": {

      },
      "EnvironmentDTO": {
        "description": "Environment for a Service",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id"
          },
          "systemId": {
            "type": "string",
            "description": "Service id"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "address": {
            "type": "string",
            "description": "Address (if service type is not MaaS"
          },
          "labels": {
            "type": "array",
            "description": "List of assigned labels",
            "items": {
              "type": "string",
              "description": "Environment label",
              "enum": [
                "DEVELOPMENT",
                "DEVELOPMENT1",
                "DEVELOPMENT2",
                "QA",
                "QA1",
                "QA2",
                "PRODUCTION",
                "PRODUCTION1",
                "PRODUCTION2",
                "STAGING",
                "STAGING1",
                "STAGING2",
                "SVT",
                "SVT1",
                "SVT2"
              ]
            }
          },
          "properties": {
            "$ref": "#/components/schemas/JsonNode",
            "description": "Additional properties"
          },
          "defaultProperties": {
            "$ref": "#/components/schemas/JsonNode",
            "description": "Default properties"
          },
          "maasDefaultProperties": {
            "$ref": "#/components/schemas/JsonNode",
            "description": "MaaS default properties"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of creation date"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created entity"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of last modification date"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who last modified entity"
          },
          "sourceType": {
            "type": "string",
            "description": "Environment data source type",
            "enum": [
              "MANUAL",
              "MAAS",
              "MAAS_BY_CLASSIFIER"
            ]
          },
          "maasInstanceId": {
            "type": "string",
            "deprecated": true,
            "description": "MaaS instance id for deprecated MaaS data source type"
          }
        }
      },
      "FolderItemRequest": {
        "description": "Folder creation request object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Folder name"
          },
          "description": {
            "type": "string",
            "description": "Folder description"
          },
          "parentId": {
            "type": "string",
            "description": "Parent folder id (if any)"
          }
        }
      },
      "ChainLabelDTO": {
        "description": "Label response object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Label name"
          },
          "technical": {
            "type": "boolean",
            "description": "Whether label should be treated as technical"
          }
        }
      },
      "ChainLoggingPropertiesSet": {
        "description": "Chain logging deployment properties",
        "properties": {
          "fallbackDefault": {
            "$ref": "#/components/schemas/DeploymentRuntimeProperties",
            "description": "Default logging deployment properties"
          },
          "consulDefault": {
            "$ref": "#/components/schemas/DeploymentRuntimeProperties",
            "description": "Consul default logging deployment properties"
          },
          "custom": {
            "$ref": "#/components/schemas/DeploymentRuntimeProperties",
            "description": "Custom logging deployment properties"
          }
        }
      },
      "DeploymentResponse": {
        "description": "Response object for a single chain deployment",
        "properties": {
          "id": {
            "type": "string",
            "description": "Inner deployment id"
          },
          "chainId": {
            "type": "string",
            "description": "Chain id"
          },
          "snapshotId": {
            "type": "string",
            "description": "Snapshot id"
          },
          "name": {
            "type": "string",
            "description": "Deployment name, usually V\u003Cnumber\u003E"
          },
          "domain": {
            "type": "string",
            "description": "Domain which was used to deploy to, usually \"default\""
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object creation"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created that object"
          },
          "suspended": {
            "type": "boolean",
            "deprecated": true,
            "description": "Not used"
          },
          "runtime": {
            "$ref": "#/components/schemas/DeploymentRuntime",
            "description": "Deployment runtime status (divided by engine pods)"
          },
          "serviceName": {
            "type": "string",
            "description": "Service name to display for errors on ui"
          }
        }
      },
      "DeploymentRuntime": {
        "description": "Deployment runtime status (divided by engine pods)",
        "properties": {
          "states": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RuntimeDeploymentState"
            },
            "description": "Deployment runtime statuses (divided by engine pods)"
          }
        }
      },
      "DeploymentRuntimeProperties": {
        "description": "Chain logging deployment properties",
        "properties": {
          "sessionsLoggingLevel": {
            "type": "string",
            "enum": [
              "OFF",
              "ERROR",
              "INFO",
              "DEBUG"
            ]
          },
          "logLoggingLevel": {
            "type": "string",
            "enum": [
              "ERROR",
              "WARN",
              "INFO"
            ]
          },
          "logPayload": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "BODY",
                "HEADERS",
                "PROPERTIES"
              ]
            },
            "uniqueItems": true
          },
          "logPayloadEnabled": {
            "type": "boolean",
            "deprecated": true
          },
          "dptEventsEnabled": {
            "type": "boolean"
          },
          "maskingEnabled": {
            "type": "boolean"
          }
        }
      },
      "FolderItemResponse": {
        "description": "Folder item response object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entity"
          },
          "name": {
            "type": "string",
            "description": "Name of the entity"
          },
          "description": {
            "type": "string",
            "description": "Entity description"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object creation"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created that object"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object last modification"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who last modified that object"
          },
          "parentId": {
            "type": "string",
            "description": "Parent (folder) id (if any)"
          },
          "itemType": {
            "type": "string",
            "description": "Item type",
            "enum": [
              "FOLDER",
              "CHAIN"
            ]
          },
          "labels": {
            "type": "array",
            "description": "Assigned labels",
            "items": {
              "$ref": "#/components/schemas/ChainLabelDTO"
            }
          },
          "deployments": {
            "type": "array",
            "description": "Chain deployments list",
            "items": {
              "$ref": "#/components/schemas/DeploymentResponse"
            }
          },
          "chainRuntimeProperties": {
            "$ref": "#/components/schemas/ChainLoggingPropertiesSet",
            "description": "Applied chain deployment properties"
          },
          "businessDescription": {
            "type": "string",
            "description": "'Business description' for chain documentation"
          },
          "assumptions": {
            "type": "string",
            "description": "'Assumptions' for chain documentation"
          },
          "outOfScope": {
            "type": "string",
            "description": "'Out of scope' for chain documentation"
          },
          "overriddenByChainId": {
            "type": "string"
          },
          "overriddenByChainName": {
            "type": "string"
          },
          "overridesChainId": {
            "type": "string"
          },
          "overridesChainName": {
            "type": "string"
          }
        }
      },
      "FolderResponse": {
        "description": "Folder response object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entity"
          },
          "name": {
            "type": "string",
            "description": "Name of the entity"
          },
          "description": {
            "type": "string",
            "description": "Entity description"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object creation"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created that object"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object last modification"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who last modified that object"
          },
          "navigationPath": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Path to current folder"
          },
          "parentId": {
            "type": "string",
            "description": "Parent folder id (if any)"
          },
          "items": {
            "type": "array",
            "description": "List of items contained in the folder",
            "items": {
              "$ref": "#/components/schemas/FolderItemResponse"
            }
          },
          "labels": {
            "type": "array",
            "description": "Assigned labels",
            "items": {
              "$ref": "#/components/schemas/ChainLabelDTO"
            }
          }
        }
      },
      "RuntimeDeploymentState": {
        "description": "Deployment status on particular engine pod",
        "properties": {
          "status": {
            "type": "string",
            "description": "Deployment status",
            "enum": [
              "DEPLOYED",
              "REMOVED",
              "FAILED",
              "PROCESSING",
              "DRAFT"
            ]
          },
          "error": {
            "type": "string",
            "description": "Error message (if any)"
          },
          "stacktrace": {
            "type": "string",
            "description": "Stacktrace of error (if any)"
          },
          "suspended": {
            "type": "boolean",
            "description": "Whether deployment is waiting for pod initialization"
          }
        }
      },
      "DDSTemplateCreateRequest": {
        "description": "Detailed design template request object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Detailed design template name"
          },
          "content": {
            "type": "string",
            "description": "Detailed design template content"
          }
        }
      },
      "DDSTemplateResponse": {
        "description": "Detailed design template response object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Detailed design template id"
          },
          "name": {
            "type": "string",
            "description": "Detailed design template name"
          },
          "builtIn": {
            "type": "boolean"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object creation"
          },
          "content": {
            "type": "string",
            "description": "Detailed design template file content"
          }
        }
      },
      "ChainRequest": {
        "description": "Chain creation request object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Chain name"
          },
          "description": {
            "type": "string",
            "description": "Chain description"
          },
          "businessDescription": {
            "type": "string",
            "description": "'Business description' for chain documentation"
          },
          "assumptions": {
            "type": "string",
            "description": "'Assumptions' for chain documentation"
          },
          "outOfScope": {
            "type": "string",
            "description": "'Out of scope' for chain documentation"
          },
          "parentId": {
            "type": "string",
            "description": "Parent (folder) id"
          },
          "labels": {
            "type": "array",
            "description": "List of labels",
            "items": {
              "$ref": "#/components/schemas/ChainLabelDTO"
            }
          }
        }
      },
      "BaseResponse": {
        "description": "Basic response object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entity"
          },
          "name": {
            "type": "string",
            "description": "Name of the entity"
          },
          "description": {
            "type": "string",
            "description": "Entity description"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object creation"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created that object"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object last modification"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who last modified that object"
          }
        }
      },
      "ChainDTO": {
        "description": "Full (with elements) response object for a single chain",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entity"
          },
          "name": {
            "type": "string",
            "description": "Name of the entity"
          },
          "description": {
            "type": "string",
            "description": "Entity description"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object creation"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created that object"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object last modification"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who last modified that object"
          },
          "navigationPath": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Navigation path through folders for the chain"
          },
          "elements": {
            "type": "array",
            "description": "Elements contained in that chain",
            "items": {
              "$ref": "#/components/schemas/ElementResponse"
            }
          },
          "dependencies": {
            "type": "array",
            "description": "Dependencies (links) between elements of the chain",
            "items": {
              "$ref": "#/components/schemas/DependencyResponse"
            }
          },
          "deployments": {
            "type": "array",
            "description": "Deployments for the chain",
            "items": {
              "$ref": "#/components/schemas/DeploymentResponse"
            }
          },
          "labels": {
            "type": "array",
            "description": "Labels assigned to the chain",
            "items": {
              "$ref": "#/components/schemas/ChainLabelDTO"
            }
          },
          "defaultSwimlaneId": {
            "type": "string",
            "description": "Id of default swimlane on chain graph (if any)"
          },
          "reuseSwimlaneId": {
            "type": "string",
            "description": "Id of reuse swimlane on chain graph (if any)"
          },
          "parentId": {
            "type": "string",
            "description": "Parent id of the chain (folder id)"
          },
          "currentSnapshot": {
            "$ref": "#/components/schemas/BaseResponse",
            "description": "Currently applied snapshot for the chain"
          },
          "unsavedChanges": {
            "type": "boolean",
            "description": "Whether chain contains unsaved changes to a snapshot"
          },
          "businessDescription": {
            "type": "string",
            "description": "'Business description' for chain documentation"
          },
          "assumptions": {
            "type": "string",
            "description": "'Assumptions' for chain documentation"
          },
          "outOfScope": {
            "type": "string",
            "description": "'Out of scope' for chain documentation"
          },
          "containsDeprecatedContainers": {
            "type": "boolean",
            "description": "Whether chain contains deprecated containers"
          },
          "containsDeprecatedElements": {
            "type": "boolean",
            "description": "Whether chain contains deprecated elements"
          },
          "containsUnsupportedElements": {
            "type": "boolean",
            "description": "Whether chain contains unsupported (deleted) elements"
          },
          "overriddenByChainId": {
            "type": "string"
          },
          "overriddenByChainName": {
            "type": "string"
          },
          "overridesChainId": {
            "type": "string"
          },
          "overridesChainName": {
            "type": "string"
          }
        }
      },
      "DependencyResponse": {
        "description": "Response object for a single dependency (link) between two elements",
        "properties": {
          "id": {
            "type": "string",
            "description": "Inner object id"
          },
          "from": {
            "type": "string",
            "description": "Element id which is linked as \"From\" object (source)"
          },
          "to": {
            "type": "string",
            "description": "Element id which is linked as \"To\" object (target)"
          }
        }
      },
      "ElementResponse": {
        "description": "Response object for a single element of the chain",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entity"
          },
          "name": {
            "type": "string",
            "description": "Name of the entity"
          },
          "description": {
            "type": "string",
            "description": "Entity description"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object creation"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created that object"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object last modification"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who last modified that object"
          },
          "chainId": {
            "type": "string",
            "description": "Chain id"
          },
          "type": {
            "type": "string",
            "description": "Inner element type"
          },
          "parentElementId": {
            "type": "string",
            "description": "Parent element id (container)"
          },
          "originalId": {
            "type": "string",
            "description": "Original id of the element (in case this element is from snapshot - it stores original id which element was copied from)"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {

            },
            "description": "Properties (data) of the element"
          },
          "children": {
            "description": "List of element children (if current element is container element)"
          },
          "swimlaneId": {
            "type": "string",
            "description": "Swimlane id which this element belongs to (if any)"
          },
          "mandatoryChecksPassed": {
            "type": "boolean",
            "description": "Whether element is configured correctly"
          }
        }
      },
      "MaskedFieldDTO": {
        "description": "Masked field data",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id"
          },
          "name": {
            "type": "string",
            "description": "Masked field name"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of creation date"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User",
            "description": "User who created entity"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of last modification date"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/User",
            "description": "User who last modified entity"
          }
        }
      },
      "User": {
        "description": "Response object for user entity",
        "properties": {
          "id": {
            "type": "string",
            "description": "User id"
          },
          "username": {
            "type": "string",
            "description": "User name"
          }
        }
      },
      "SystemSearchRequestDTO": {
        "description": "Service search request object",
        "properties": {
          "searchCondition": {
            "type": "string",
            "description": "Search value"
          }
        }
      },
      "FilterRequestDTO": {
        "description": "Filter request object",
        "properties": {
          "condition": {
            "type": "string",
            "description": "Filter condition",
            "enum": [
              "IS",
              "IS_NOT",
              "CONTAINS",
              "DOES_NOT_CONTAIN",
              "START_WITH",
              "ENDS_WITH",
              "IN",
              "NOT_IN",
              "EMPTY",
              "NOT_EMPTY",
              "IS_AFTER",
              "IS_BEFORE",
              "IS_WITHIN"
            ]
          },
          "value": {
            "type": "string",
            "description": "Value"
          },
          "column": {
            "type": "string",
            "description": "Column name",
            "enum": [
              "STATUS",
              "ENGINES",
              "LOGGING",
              "NAME",
              "ID",
              "DESCRIPTION",
              "PATH",
              "METHOD",
              "TOPIC",
              "EXCHANGE",
              "QUEUE",
              "LABELS",
              "ELEMENT",
              "CREATED",
              "SPECIFICATION_GROUP",
              "SPECIFICATION_VERSION",
              "URL",
              "PROTOCOL",
              "SERVICE_ID",
              "ENTITY_TYPE",
              "INSTRUCTION_ACTION",
              "OVERRIDDEN_BY",
              "MODIFIED_WHEN",
              "CLASSIFIER"
            ]
          }
        }
      },
      "SpecificationGroupCreationRequestDTO": {
        "description": "Specification group create request object",
        "properties": {
          "systemId": {
            "type": "string",
            "description": "Service id"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "url": {
            "type": "string",
            "description": "Url on a target service for discovered service"
          },
          "synchronization": {
            "type": "boolean",
            "description": "Whether update on next discovery enabled for that particular specification group"
          }
        }
      },
      "SpecificationGroupDTO": {
        "description": "Specification group",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "systemId": {
            "type": "string",
            "description": "Service id"
          },
          "url": {
            "type": "string",
            "description": "Url on target service (in case of discovered specification)"
          },
          "synchronization": {
            "type": "boolean",
            "description": "Whether update on next discovery enabled for that particular specification"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object creation"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created that object"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object last modification"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who last modified that object"
          },
          "specifications": {
            "type": "array",
            "description": "List of contained specifications",
            "items": {
              "$ref": "#/components/schemas/SystemModelBaseDTO"
            }
          },
          "chains": {
            "type": "array",
            "description": "List of chains that is using current specification group",
            "items": {
              "$ref": "#/components/schemas/BaseResponse"
            }
          },
          "labels": {
            "type": "array",
            "description": "Labels assigned to the specification group",
            "items": {
              "$ref": "#/components/schemas/SpecificationGroupLabelDTO"
            }
          }
        }
      },
      "SpecificationGroupLabelDTO": {
        "description": "Label response object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Label name"
          },
          "technical": {
            "type": "boolean",
            "description": "Whether label should be treated as technical"
          }
        }
      },
      "SystemModelBaseDTO": {
        "description": "Specification",
        "properties": {
          "id": {
            "type": "string",
            "description": "id"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "name": {
            "type": "string",
            "description": "Name (usually same as version)"
          },
          "specificationGroupId": {
            "type": "string",
            "description": "Specification group id"
          },
          "active": {
            "type": "boolean",
            "description": "Whether specification is active"
          },
          "deprecated": {
            "type": "boolean",
            "description": "Whether specification is deprecated"
          },
          "version": {
            "type": "string",
            "description": "Specification version"
          },
          "source": {
            "type": "string",
            "description": "Raw contents of specification source file"
          },
          "systemId": {
            "type": "string",
            "description": "Service id"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object creation"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created that object"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object last modification"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who last modified that object"
          },
          "chains": {
            "type": "array",
            "description": "List of chains that is using current specification",
            "items": {
              "$ref": "#/components/schemas/BaseResponse"
            }
          },
          "labels": {
            "type": "array",
            "description": "Labels assigned to the specification",
            "items": {
              "$ref": "#/components/schemas/SystemModelLabelDTO"
            }
          }
        }
      },
      "SystemModelLabelDTO": {
        "description": "Label response object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Label name"
          },
          "technical": {
            "type": "boolean",
            "description": "Whether label should be treated as technical"
          }
        }
      },
      "OperationBaseDTO": {
        "description": "Operation object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "name": {
            "type": "string",
            "description": "Operation name (tag)"
          },
          "method": {
            "type": "string",
            "description": "Operation method"
          },
          "path": {
            "type": "string",
            "description": "Path"
          },
          "modelId": {
            "type": "string",
            "description": "Specification id"
          },
          "chains": {
            "type": "array",
            "description": "List of chains using current operation",
            "items": {
              "$ref": "#/components/schemas/BaseResponse"
            }
          }
        }
      },
      "SystemModelDTO": {
        "description": "Specification",
        "properties": {
          "id": {
            "type": "string",
            "description": "id"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "name": {
            "type": "string",
            "description": "Name (usually same as version)"
          },
          "specificationGroupId": {
            "type": "string",
            "description": "Specification group id"
          },
          "active": {
            "type": "boolean",
            "description": "Whether specification is active"
          },
          "deprecated": {
            "type": "boolean",
            "description": "Whether specification is deprecated"
          },
          "version": {
            "type": "string",
            "description": "Specification version"
          },
          "source": {
            "type": "string",
            "description": "Raw contents of specification source file"
          },
          "systemId": {
            "type": "string",
            "description": "Service id"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object creation"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created that object"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object last modification"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who last modified that object"
          },
          "chains": {
            "type": "array",
            "description": "List of chains that is using current specification",
            "items": {
              "$ref": "#/components/schemas/BaseResponse"
            }
          },
          "labels": {
            "type": "array",
            "description": "Labels assigned to the specification",
            "items": {
              "$ref": "#/components/schemas/SystemModelLabelDTO"
            }
          },
          "operations": {
            "type": "array",
            "description": "Operations list",
            "items": {
              "$ref": "#/components/schemas/OperationBaseDTO"
            }
          }
        }
      },
      "ImportInstructionRequest": {
        "description": "Update import instruction request object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Import instruction id"
          },
          "entityType": {
            "type": "string",
            "description": "The type of entity to which instruction will apply",
            "enum": [
              "CHAIN",
              "SERVICE"
            ],
            "pattern": "CHAIN|SERVICE"
          },
          "action": {
            "type": "string",
            "description": "Import instruction action",
            "enum": [
              "IGNORE",
              "OVERRIDE"
            ],
            "pattern": "IGNORE|OVERRIDE"
          },
          "overriddenBy": {
            "type": "string",
            "description": "Id of chain to be overridden"
          }
        },
        "required": [
          "action",
          "entityType"
        ]
      },
      "ImportInstructionDTO": {
        "description": "Import instruction response object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Import instruction/entity id"
          },
          "name": {
            "type": "string",
            "description": "Entity name"
          },
          "overriddenById": {
            "type": "string",
            "description": "Id of chain to be overridden"
          },
          "overriddenByName": {
            "type": "string",
            "description": "Name of chain to be overridden"
          },
          "labels": {
            "type": "array",
            "description": "List of import instruction labels",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object last modification"
          },
          "preview": {
            "type": "boolean",
            "description": "Indicates whether the import instruction stored in DB"
          }
        }
      },
      "ImportInstructionsSearchRequestDTO": {
        "description": "Import instructions search request object",
        "properties": {
          "searchCondition": {
            "type": "string",
            "description": "Search value"
          }
        }
      },
      "ChainImportInstructionsDTO": {
        "description": "Chain import instructions object",
        "properties": {
          "delete": {
            "type": "array",
            "description": "List of delete import instructions objects",
            "items": {
              "$ref": "#/components/schemas/ImportInstructionDTO"
            },
            "uniqueItems": true
          },
          "ignore": {
            "type": "array",
            "description": "List of ignore import instructions objects",
            "items": {
              "$ref": "#/components/schemas/ImportInstructionDTO"
            },
            "uniqueItems": true
          },
          "override": {
            "type": "array",
            "description": "List of override import instructions objects",
            "items": {
              "$ref": "#/components/schemas/ImportInstructionDTO"
            },
            "uniqueItems": true
          }
        }
      },
      "GeneralImportInstructionsDTO": {
        "description": "Import instructions response object",
        "properties": {
          "chains": {
            "$ref": "#/components/schemas/ChainImportInstructionsDTO",
            "description": "Chain import instructions object"
          },
          "services": {
            "$ref": "#/components/schemas/ImportInstructionsDTO",
            "description": "Service import instructions object"
          },
          "specificationGroups": {
            "$ref": "#/components/schemas/ImportInstructionsDTO",
            "description": "Specification groups import instructions object"
          },
          "specifications": {
            "$ref": "#/components/schemas/ImportInstructionsDTO",
            "description": "Specification import instructions object"
          },
          "commonVariables": {
            "$ref": "#/components/schemas/ImportInstructionsDTO",
            "description": "Common variable import instructions object"
          }
        }
      },
      "ImportInstructionsDTO": {
        "description": "Entity import instructions response object",
        "properties": {
          "delete": {
            "type": "array",
            "description": "List of delete import instructions objects",
            "items": {
              "$ref": "#/components/schemas/ImportInstructionDTO"
            },
            "uniqueItems": true
          },
          "ignore": {
            "type": "array",
            "description": "List of ignore import instructions objects",
            "items": {
              "$ref": "#/components/schemas/ImportInstructionDTO"
            },
            "uniqueItems": true
          }
        }
      },
      "ChainSearchRequestDTO": {
        "description": "Folder search request object",
        "properties": {
          "searchCondition": {
            "type": "string",
            "description": "Search condition value"
          }
        }
      },
      "GenerateChainDesignRequest": {
        "description": "Design generation request",
        "properties": {
          "diagramModes": {
            "type": "array",
            "description": "Requested diagram modes",
            "items": {
              "type": "string",
              "description": "Diagram view mode type",
              "enum": [
                "FULL",
                "SIMPLE"
              ]
            }
          }
        }
      },
      "ElementsSequenceDiagram": {
        "description": "Sequence diagram object for a chain",
        "properties": {
          "chainId": {
            "type": "string",
            "description": "Chain id"
          },
          "snapshotId": {
            "type": "string",
            "description": "Snapshot id"
          },
          "diagramSources": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Diagrams grouped by diagram language"
          }
        }
      },
      "ChainResponse": {
        "description": "Response object for a single chain without chain elements",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entity"
          },
          "name": {
            "type": "string",
            "description": "Name of the entity"
          },
          "description": {
            "type": "string",
            "description": "Entity description"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object creation"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created that object"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object last modification"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who last modified that object"
          },
          "parentId": {
            "type": "string",
            "description": "Parent id of the chain (folder id)"
          },
          "defaultSwimlaneId": {
            "type": "string",
            "description": "Id of default swimlane on chain graph (if any)"
          },
          "reuseSwimlaneId": {
            "type": "string",
            "description": "Id of reuse swimlane on chain graph (if any)"
          },
          "labels": {
            "type": "array",
            "description": "Labels assigned to the chain",
            "items": {
              "$ref": "#/components/schemas/ChainLabelDTO"
            }
          }
        }
      },
      "CreateElementRequest": {
        "description": "Create element request object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Inner element type"
          },
          "parentElementId": {
            "type": "string",
            "description": "Parent element (container) id"
          },
          "swimlaneId": {
            "type": "string",
            "description": "Swimlane id (if any)"
          }
        }
      },
      "ChainDiffResponse": {
        "description": "Difference list for the chain after some action",
        "properties": {
          "createdElements": {
            "type": "array",
            "description": "Created elements",
            "items": {
              "$ref": "#/components/schemas/ElementResponse"
            }
          },
          "updatedElements": {
            "type": "array",
            "description": "Updated elements",
            "items": {
              "$ref": "#/components/schemas/ElementResponse"
            }
          },
          "removedElements": {
            "type": "array",
            "description": "Removed elements",
            "items": {
              "$ref": "#/components/schemas/ElementResponse"
            }
          },
          "createdDefaultSwimlaneId": {
            "type": "string",
            "description": "Created default swimlane id (if any)"
          },
          "createdReuseSwimlaneId": {
            "type": "string",
            "description": "Created reuse swimlane id (if any)"
          },
          "createdDependencies": {
            "type": "array",
            "description": "Created dependencies (links between elements)",
            "items": {
              "$ref": "#/components/schemas/DependencyResponse"
            }
          },
          "removedDependencies": {
            "type": "array",
            "description": "Removed dependencies (links between elements)",
            "items": {
              "$ref": "#/components/schemas/DependencyResponse"
            }
          }
        }
      },
      "TransferElementRequest": {
        "description": "Transfer element request object",
        "properties": {
          "parentId": {
            "type": "string",
            "description": "Target parent (container) id"
          },
          "swimlaneId": {
            "type": "string",
            "description": "Target swimlane id"
          },
          "elements": {
            "type": "array",
            "description": "List of element ids to transfer (source)",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ElementsCodeDTO": {
        "description": "Code representation from all elements in a chain",
        "properties": {
          "code": {
            "type": "string",
            "description": "Elements code"
          }
        }
      },
      "CloneElementRequest": {
        "description": "Copy element request",
        "properties": {
          "id": {
            "type": "string",
            "description": "Source element id"
          },
          "parent": {
            "type": "string",
            "description": "Target container id (id any)"
          }
        }
      },
      "DependencyRequest": {
        "description": "Dependency object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Element id which is linked as \"From\" object (source)"
          },
          "to": {
            "type": "string",
            "description": "Element id which is linked as \"To\" object (target)"
          }
        }
      },
      "ChainElementDTO": {
        "description": "Object containing information about chain/snapshot element",
        "properties": {
          "originalId": {
            "type": "string",
            "description": "Original id of the element (for chain element - value from id field, for snapshot element - original id which element was copied from)"
          },
          "parentElementId": {
            "type": "string",
            "description": "Parent element original id (container)"
          },
          "type": {
            "type": "string",
            "description": "Inner element type"
          },
          "name": {
            "type": "string",
            "description": "Chain element name"
          },
          "description": {
            "type": "string",
            "description": "Chain element description"
          },
          "childrenOriginalIds": {
            "type": "array",
            "description": "List of element child original ids (if current element is container element)",
            "items": {
              "type": "string"
            }
          },
          "properties": {
            "type": "object",
            "additionalProperties": {

            },
            "description": "Properties (data) of the element"
          }
        }
      },
      "ChainElementDifferenceDTO": {
        "description": "Object containing information about the differences between two chain elements",
        "properties": {
          "leftElement": {
            "$ref": "#/components/schemas/ChainElementDTO",
            "description": "Original chain element object"
          },
          "rightElement": {
            "$ref": "#/components/schemas/ChainElementDTO",
            "description": "Modified chain element object"
          },
          "onlyOnLeft": {
            "type": "array",
            "description": "Field names, that exist only in original element",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "onlyOnRight": {
            "type": "array",
            "description": "Field names, that exist only in modified element",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "differing": {
            "type": "array",
            "description": "Field names, that exist in both elements with different values",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        }
      },
      "ChainLiteDTO": {
        "description": "Chain lite object for using in the chain diff API",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entity"
          },
          "name": {
            "type": "string",
            "description": "Name of the entity"
          },
          "description": {
            "type": "string",
            "description": "Entity description"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object creation"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created that object"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object last modification"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who last modified that object"
          },
          "currentSnapshotId": {
            "type": "string",
            "default": "00000000-0000-0000-0000-000000000000",
            "description": "Id of the snapshot selected for comparing"
          },
          "currentSnapshotName": {
            "type": "string",
            "default": "Current",
            "description": "Name of the snapshot selected for comparing"
          },
          "dependencies": {
            "type": "array",
            "description": "Dependencies (links) between elements of the chain",
            "items": {
              "$ref": "#/components/schemas/DependencyResponse"
            }
          }
        }
      },
      "EntityDifferenceResponse": {
        "description": "Response object containing information about the difference between two chains/snapshots",
        "properties": {
          "leftEntity": {
            "$ref": "#/components/schemas/ChainLiteDTO",
            "description": "Original chain lite object"
          },
          "rightEntity": {
            "$ref": "#/components/schemas/ChainLiteDTO",
            "description": "Modified chain lite object"
          },
          "elementsDifferences": {
            "type": "array",
            "description": "List containing information about the difference between chains elements",
            "items": {
              "$ref": "#/components/schemas/ChainElementDifferenceDTO"
            }
          }
        }
      },
      "ChainDifferenceRequest": {
        "description": "Request object containing identification information to find differences between chains/snapshots",
        "properties": {
          "leftChainId": {
            "type": "string",
            "description": "Original chain id"
          },
          "leftSnapshotId": {
            "type": "string",
            "description": "Original snapshot id"
          },
          "rightChainId": {
            "type": "string",
            "description": "Modified chain id"
          },
          "rightSnapshotId": {
            "type": "string",
            "description": "Modified snapshot id"
          }
        },
        "required": [
          "leftChainId",
          "rightChainId"
        ]
      },
      "ActionLogFilterRequestDTO": {
        "description": "Audit log filter request",
        "properties": {
          "column": {
            "type": "string",
            "description": "Audit log column name for filter",
            "enum": [
              "OPERATION",
              "ENTITY_ID",
              "ENTITY_TYPE",
              "ENTITY_NAME",
              "PARENT_ID",
              "PARENT_NAME",
              "REQUEST_ID",
              "ACTION_TIME",
              "INITIATOR"
            ]
          },
          "condition": {
            "type": "string",
            "description": "Filter condition",
            "enum": [
              "IS",
              "IS_NOT",
              "CONTAINS",
              "DOES_NOT_CONTAIN",
              "START_WITH",
              "ENDS_WITH",
              "IN",
              "NOT_IN",
              "EMPTY",
              "NOT_EMPTY",
              "IS_AFTER",
              "IS_BEFORE",
              "IS_WITHIN"
            ]
          },
          "value": {
            "type": "string",
            "description": "Search value"
          }
        }
      },
      "ActionLogSearchCriteria": {
        "description": "Search request",
        "properties": {
          "offsetTime": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of request offset"
          },
          "rangeTime": {
            "type": "integer",
            "format": "int64",
            "description": "Range in milliseconds"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionLogFilterRequestDTO"
            }
          }
        }
      },
      "ActionLogDTO": {
        "description": "Action log single entity",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id"
          },
          "actionTime": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of action"
          },
          "entityType": {
            "type": "string",
            "description": "Action log entity type",
            "enum": [
              "FOLDER",
              "CHAIN",
              "SNAPSHOT",
              "SNAPSHOT_CLEANUP",
              "DEPLOYMENT",
              "ELEMENT",
              "DOMAIN",
              "MASKED_FIELD",
              "CHAINS",
              "CHAIN_RUNTIME_PROPERTIES",
              "DATABASE_SYSTEM",
              "DATABASE_SCRIPT",
              "SERVICE_DISCOVERY",
              "EXTERNAL_SERVICE",
              "INNER_CLOUD_SERVICE",
              "IMPLEMENTED_SERVICE",
              "ENVIRONMENT",
              "SPECIFICATION",
              "SPECIFICATION_GROUP",
              "SERVICES",
              "SECURED_VARIABLE",
              "COMMON_VARIABLE",
              "MAAS_KAFKA",
              "MAAS_RABBITMQ",
              "DETAILED_DESIGN_TEMPLATE",
              "IMPORT_INSTRUCTION",
              "IMPORT_INSTRUCTIONS",
              "EXCHANGE"
            ]
          },
          "entityId": {
            "type": "string",
            "description": "Entity id"
          },
          "entityName": {
            "type": "string",
            "description": "Entity name"
          },
          "parentId": {
            "type": "string",
            "description": "Parent entity id"
          },
          "parentType": {
            "type": "string",
            "description": "Action log entity type",
            "enum": [
              "FOLDER",
              "CHAIN",
              "SNAPSHOT",
              "SNAPSHOT_CLEANUP",
              "DEPLOYMENT",
              "ELEMENT",
              "DOMAIN",
              "MASKED_FIELD",
              "CHAINS",
              "CHAIN_RUNTIME_PROPERTIES",
              "DATABASE_SYSTEM",
              "DATABASE_SCRIPT",
              "SERVICE_DISCOVERY",
              "EXTERNAL_SERVICE",
              "INNER_CLOUD_SERVICE",
              "IMPLEMENTED_SERVICE",
              "ENVIRONMENT",
              "SPECIFICATION",
              "SPECIFICATION_GROUP",
              "SERVICES",
              "SECURED_VARIABLE",
              "COMMON_VARIABLE",
              "MAAS_KAFKA",
              "MAAS_RABBITMQ",
              "DETAILED_DESIGN_TEMPLATE",
              "IMPORT_INSTRUCTION",
              "IMPORT_INSTRUCTIONS",
              "EXCHANGE"
            ]
          },
          "parentName": {
            "type": "string",
            "description": "Parent entity name"
          },
          "requestId": {
            "type": "string",
            "description": "Request id with which request was initialized"
          },
          "operation": {
            "type": "string",
            "description": "Action log operation",
            "enum": [
              "CREATE",
              "UPDATE",
              "CREATE_OR_UPDATE",
              "DELETE",
              "COPY",
              "MOVE",
              "REVERT",
              "GROUP",
              "UNGROUP",
              "EXPORT",
              "IMPORT",
              "SCALE",
              "EXECUTE",
              "ACTIVATE",
              "DEPRECATE"
            ]
          },
          "userId": {
            "type": "string",
            "description": "Id of user who triggered action"
          },
          "username": {
            "type": "string",
            "description": "Name of user who triggered action"
          }
        }
      },
      "ActionLogResponse": {
        "description": "Action log response with entities",
        "properties": {
          "actionLogs": {
            "type": "array",
            "description": "List of action logs",
            "items": {
              "$ref": "#/components/schemas/ActionLogDTO"
            }
          },
          "recordsAfterRange": {
            "type": "integer",
            "format": "int64",
            "description": "How much records are left after specified range"
          }
        }
      },
      "SpecificationGroupRequestDTO": {
        "description": "Specification group modification object",
        "properties": {
          "synchronization": {
            "type": "boolean",
            "description": "Whether update on next discovery enabled for that particular specification group"
          },
          "labels": {
            "type": "array",
            "description": "Labels assigned to the specification group",
            "items": {
              "$ref": "#/components/schemas/SpecificationGroupLabelDTO"
            }
          }
        }
      },
      "MigratedChainDTO": {
        "description": "Result status after chain migration process",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/ChainDTO",
            "description": "Affected chain"
          },
          "groupsRemoved": {
            "type": "boolean",
            "description": "Whether groups were removed from the chain"
          }
        }
      },
      "PatchElementRequest": {
        "description": "Change element request object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Element name"
          },
          "description": {
            "type": "string",
            "description": "Element description"
          },
          "type": {
            "type": "string",
            "description": "Inner element type"
          },
          "parentElementId": {
            "type": "string",
            "description": "Parent element (container) id"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {

            },
            "description": "Map of properties for the element"
          }
        }
      },
      "Chain": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdWhen": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedWhen": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/User"
          },
          "parentFolder": {
            "$ref": "#/components/schemas/Folder"
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChainElement"
            }
          },
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Snapshot"
            }
          },
          "deployments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Deployment"
            }
          },
          "validationAlerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationChainAlert"
            }
          },
          "defaultSwimlane": {
            "$ref": "#/components/schemas/SwimlaneChainElement"
          },
          "reuseSwimlane": {
            "$ref": "#/components/schemas/SwimlaneChainElement"
          },
          "maskedFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaskedField"
            },
            "uniqueItems": true
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "currentSnapshot": {
            "$ref": "#/components/schemas/Snapshot"
          },
          "overriddenByChainId": {
            "type": "string"
          },
          "overriddenByChain": {
            "$ref": "#/components/schemas/Chain"
          },
          "overridesChainId": {
            "type": "string"
          },
          "overridesChain": {
            "$ref": "#/components/schemas/Chain"
          },
          "unsavedChanges": {
            "type": "boolean"
          },
          "businessDescription": {
            "type": "string"
          },
          "assumptions": {
            "type": "string"
          },
          "outOfScope": {
            "type": "string"
          },
          "lastImportHash": {
            "type": "string"
          },
          "rootElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChainElement"
            }
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dependency"
            },
            "uniqueItems": true
          },
          "ancestors": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ChainElement": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdWhen": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedWhen": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/User"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "parent": {
            "$ref": "#/components/schemas/ContainerChainElement"
          },
          "swimlane": {
            "$ref": "#/components/schemas/SwimlaneChainElement"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {

            }
          },
          "environment": {
            "$ref": "#/components/schemas/ServiceEnvironment"
          },
          "snapshot": {
            "$ref": "#/components/schemas/Snapshot"
          },
          "type": {
            "type": "string"
          },
          "originalId": {
            "type": "string"
          },
          "inputDependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dependency"
            }
          },
          "outputDependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dependency"
            }
          },
          "validationAlerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationChainAlert"
            }
          }
        }
      },
      "ContainerChainElement": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdWhen": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedWhen": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/User"
          },
          "chain": {

          },
          "parent": {

          },
          "swimlane": {
            "$ref": "#/components/schemas/SwimlaneChainElement"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {

            }
          },
          "environment": {
            "$ref": "#/components/schemas/ServiceEnvironment"
          },
          "snapshot": {
            "$ref": "#/components/schemas/Snapshot"
          },
          "type": {
            "type": "string"
          },
          "originalId": {
            "type": "string"
          },
          "inputDependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dependency"
            }
          },
          "outputDependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dependency"
            }
          },
          "validationAlerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationChainAlert"
            }
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChainElement"
            }
          }
        }
      },
      "Dependency": {
        "properties": {
          "id": {
            "type": "string"
          },
          "elementFrom": {
            "$ref": "#/components/schemas/ChainElement"
          },
          "elementTo": {
            "$ref": "#/components/schemas/ChainElement"
          }
        }
      },
      "Deployment": {
        "properties": {
          "id": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "createdWhen": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          },
          "suspended": {
            "type": "boolean",
            "deprecated": true
          },
          "sessionsLoggingLevel": {
            "type": "string",
            "deprecated": true,
            "enum": [
              "NO_REPORTS",
              "ERROR",
              "SESSION",
              "FULL_REPORTING"
            ]
          },
          "logLoggingLevel": {
            "type": "string",
            "deprecated": true,
            "enum": [
              "ERROR",
              "WARN",
              "INFO"
            ]
          },
          "logPayloadLevel": {
            "type": "string",
            "deprecated": true,
            "enum": [
              "NO_PAYLOAD",
              "FULL_PAYLOAD"
            ]
          },
          "dptEventsEnabled": {
            "type": "boolean",
            "deprecated": true
          },
          "maskingEnabled": {
            "type": "boolean",
            "deprecated": true
          },
          "snapshot": {
            "$ref": "#/components/schemas/Snapshot"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "deploymentRoutes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DeploymentRoute"
            }
          }
        }
      },
      "DeploymentRoute": {
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "gatewayPrefix": {
            "type": "string"
          },
          "variableName": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "Route type to register on control plane",
            "enum": [
              "EXTERNAL_TRIGGER",
              "PRIVATE_TRIGGER",
              "EXTERNAL_PRIVATE_TRIGGER",
              "INTERNAL_TRIGGER",
              "EXTERNAL_SENDER",
              "EXTERNAL_SERVICE",
              "INTERNAL_SERVICE",
              "IMPLEMENTED_SERVICE"
            ]
          },
          "connectTimeout": {
            "type": "integer",
            "format": "int64"
          },
          "deployment": {
            "$ref": "#/components/schemas/Deployment"
          }
        }
      },
      "Folder": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdWhen": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedWhen": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/User"
          },
          "parentFolder": {

          },
          "folderList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Folder"
            }
          },
          "chainList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Chain"
            }
          },
          "ancestors": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "MaskedField": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdWhen": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedWhen": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/User"
          },
          "snapshot": {
            "$ref": "#/components/schemas/Snapshot"
          }
        }
      },
      "ServiceEnvironment": {
        "properties": {
          "id": {
            "type": "string"
          },
          "systemId": {
            "type": "string"
          },
          "sourceType": {
            "type": "string",
            "description": "Environment type",
            "enum": [
              "MANUAL",
              "MAAS",
              "MAAS_BY_CLASSIFIER"
            ]
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "address": {
            "type": "string"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {

            }
          },
          "notActivated": {
            "type": "boolean"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Snapshot": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdWhen": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedWhen": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/User"
          },
          "xmlDefinition": {
            "type": "string"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "deployments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Deployment"
            }
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChainElement"
            }
          },
          "defaultSwimlane": {
            "$ref": "#/components/schemas/SwimlaneChainElement"
          },
          "reuseSwimlane": {
            "$ref": "#/components/schemas/SwimlaneChainElement"
          },
          "maskedFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MaskedField"
            },
            "uniqueItems": true
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "dependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dependency"
            },
            "uniqueItems": true
          }
        }
      },
      "SwimlaneChainElement": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "createdWhen": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedWhen": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/User"
          },
          "chain": {

          },
          "parent": {
            "$ref": "#/components/schemas/ContainerChainElement"
          },
          "swimlane": {
            "$ref": "#/components/schemas/SwimlaneChainElement"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {

            }
          },
          "environment": {
            "$ref": "#/components/schemas/ServiceEnvironment"
          },
          "snapshot": {
            "$ref": "#/components/schemas/Snapshot"
          },
          "type": {
            "type": "string"
          },
          "originalId": {
            "type": "string"
          },
          "inputDependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dependency"
            }
          },
          "outputDependencies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dependency"
            }
          },
          "validationAlerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationChainAlert"
            }
          },
          "elements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChainElement"
            }
          },
          "defaultSwimlane": {
            "type": "boolean"
          },
          "reuseSwimlane": {
            "type": "boolean"
          },
          "rootElements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChainElement"
            }
          }
        }
      },
      "ValidationChainAlert": {
        "properties": {
          "id": {
            "type": "string"
          },
          "validationId": {
            "type": "string"
          },
          "chain": {

          },
          "element": {
            "$ref": "#/components/schemas/ChainElement"
          },
          "createdWhen": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/User"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {

            }
          }
        }
      },
      "DiscoveredServiceDTO": {
        "description": "Service that was once discovered on some environment",
        "properties": {
          "id": {
            "type": "string",
            "description": "Service id"
          },
          "name": {
            "type": "string",
            "description": "Service name"
          },
          "internalServiceName": {
            "type": "string",
            "description": "Service address (in k8s network)"
          },
          "serviceGroups": {
            "type": "array",
            "description": "Discovered specifications (groups)",
            "items": {
              "$ref": "#/components/schemas/DiscoveredServiceGroupDTO"
            }
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of creation date"
          }
        }
      },
      "DiscoveredServiceGroupDTO": {
        "description": "Specification (group) that was once discovered on some environment",
        "properties": {
          "id": {
            "type": "string",
            "description": "Specification group id"
          },
          "name": {
            "type": "string",
            "description": "Specification group name"
          },
          "synchronization": {
            "type": "boolean",
            "description": "Whether update on next discovery enabled for that particular specification"
          },
          "specificationId": {
            "type": "string",
            "description": "Specification id"
          },
          "specificationName": {
            "type": "string",
            "description": "Specification name"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of creation date"
          }
        }
      },
      "DiscoveryErrorDTO": {
        "description": "Error message for discovery process",
        "properties": {
          "serviceName": {
            "type": "string",
            "description": "External service name (in k8s network)"
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        }
      },
      "DiscoveryResultDTO": {
        "description": "Result of a discovery process",
        "properties": {
          "discoveredSystemIds": {
            "type": "array",
            "description": "List of created service ids",
            "items": {
              "type": "string"
            }
          },
          "discoveredGroupIds": {
            "type": "array",
            "description": "List of created specification group ids",
            "items": {
              "type": "string"
            }
          },
          "discoveredSpecificationIds": {
            "type": "array",
            "description": "List of created specification ids",
            "items": {
              "type": "string"
            }
          },
          "updatedSystemsIds": {
            "type": "array",
            "description": "List of updated service ids",
            "items": {
              "type": "string"
            }
          },
          "errorMessages": {
            "type": "array",
            "description": "List of error messages",
            "items": {
              "$ref": "#/components/schemas/DiscoveryErrorDTO"
            }
          }
        }
      },
      "OperationDTO": {
        "description": "Operation object with specification",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id"
          },
          "description": {
            "type": "string",
            "description": "Description"
          },
          "name": {
            "type": "string",
            "description": "Operation name (tag)"
          },
          "method": {
            "type": "string",
            "description": "Operation method"
          },
          "path": {
            "type": "string",
            "description": "Path"
          },
          "modelId": {
            "type": "string",
            "description": "Specification id"
          },
          "chains": {
            "type": "array",
            "description": "List of chains using current operation",
            "items": {
              "$ref": "#/components/schemas/BaseResponse"
            }
          },
          "specification": {
            "$ref": "#/components/schemas/JsonNode",
            "description": "Specification part for current operation"
          }
        }
      },
      "OperationInfoDTO": {
        "description": "Operation info object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Operation id"
          },
          "specification": {
            "$ref": "#/components/schemas/JsonNode",
            "description": "Specification part"
          },
          "requestSchema": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/JsonNode"
            },
            "description": "Request schemas for operation"
          },
          "responseSchemas": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/JsonNode"
            },
            "description": "Response schemas for operation"
          }
        }
      },
      "ContainerChildrenParameters": {
        "description": "Container children parameters object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name"
          },
          "primaryOperation": {
            "$ref": "#/components/schemas/ElementDiagramOperation",
            "description": "Operator for first element entry"
          },
          "secondaryOperation": {
            "$ref": "#/components/schemas/ElementDiagramOperation",
            "description": "Other operations, optional parameter. If null - will be used primaryOperation for all elements"
          }
        }
      },
      "CustomTab": {
        "description": "Custom tab implemented on ui for the element",
        "properties": {
          "name": {
            "type": "string",
            "description": "Tab name"
          },
          "uiComponent": {
            "type": "string",
            "description": "Ui component name of the tab"
          },
          "validation": {
            "$ref": "#/components/schemas/PropertyValidation",
            "description": "Properties validation rules"
          }
        }
      },
      "ElementContainerDesignParameters": {
        "description": "Additional element parameters for container elements (with children) for chain sequence diagram building",
        "properties": {
          "firstChildrenType": {
            "type": "string",
            "description": "Operation type for first children",
            "enum": [
              "DOCUMENT_START",
              "DOCUMENT_END",
              "AUTONUMBER",
              "ACTOR",
              "ACTOR_AS",
              "PARTICIPANT",
              "PARTICIPANT_AS",
              "LINE_WITH_ARROW_SOLID_RIGHT",
              "LINE_WITH_ARROW_DOTTED_RIGHT",
              "LINE_WITH_OPEN_ARROW_SOLID_RIGHT",
              "LINE_WITH_OPEN_ARROW_DOTTED_RIGHT",
              "ACTIVATE",
              "DEACTIVATE",
              "END",
              "START_LOOP",
              "START_ALT",
              "ELSE",
              "START_OPT",
              "START_PAR",
              "PAR_ELSE",
              "START_COLORED_GROUP",
              "START_GROUP",
              "BLOCK_DELIMITER",
              "DELAY"
            ]
          },
          "childrenType": {
            "type": "string",
            "description": "Operation type for others children",
            "enum": [
              "DOCUMENT_START",
              "DOCUMENT_END",
              "AUTONUMBER",
              "ACTOR",
              "ACTOR_AS",
              "PARTICIPANT",
              "PARTICIPANT_AS",
              "LINE_WITH_ARROW_SOLID_RIGHT",
              "LINE_WITH_ARROW_DOTTED_RIGHT",
              "LINE_WITH_OPEN_ARROW_SOLID_RIGHT",
              "LINE_WITH_OPEN_ARROW_DOTTED_RIGHT",
              "ACTIVATE",
              "DEACTIVATE",
              "END",
              "START_LOOP",
              "START_ALT",
              "ELSE",
              "START_OPT",
              "START_PAR",
              "PAR_ELSE",
              "START_COLORED_GROUP",
              "START_GROUP",
              "BLOCK_DELIMITER",
              "DELAY"
            ]
          },
          "endOperations": {
            "type": "array",
            "description": "Operations (in proper order) applied after processing of child elements is completed",
            "items": {
              "$ref": "#/components/schemas/ElementDiagramOperation"
            }
          },
          "children": {
            "type": "array",
            "description": "Container children in proper order (starts from the main element)",
            "items": {
              "$ref": "#/components/schemas/ContainerChildrenParameters"
            }
          }
        }
      },
      "ElementDescriptor": {
        "description": "Library element descriptor",
        "properties": {
          "name": {
            "type": "string",
            "description": "Inner type name"
          },
          "title": {
            "type": "string",
            "description": "Name of the element"
          },
          "description": {
            "type": "string",
            "description": "Short description"
          },
          "folder": {
            "type": "string",
            "description": "Folder (group) element belongs to"
          },
          "colorType": {
            "type": "string",
            "description": "Color type for displaying on ui"
          },
          "color": {
            "type": "string",
            "deprecated": true,
            "description": "Color for displaying on ui"
          },
          "descriptionFormatter": {
            "type": "string",
            "description": "Description formatter type for sequence diagram builder"
          },
          "type": {
            "type": "string",
            "description": "Element type in terms of behavior",
            "enum": [
              "module",
              "trigger",
              "composite-trigger",
              "system",
              "container",
              "swimlane",
              "reuse",
              "reuse-reference"
            ]
          },
          "inputEnabled": {
            "type": "boolean",
            "description": "Whether input dependency (link) is allowed"
          },
          "inputQuantity": {
            "type": "string",
            "description": "How much input dependency (link) is allowed",
            "enum": [
              "any",
              "one-or-zero",
              "one-or-many",
              "two-or-many",
              "one"
            ]
          },
          "outputEnabled": {
            "type": "boolean",
            "description": "Whether output dependency (link) is allowed"
          },
          "container": {
            "type": "boolean",
            "description": "Whether element is a container"
          },
          "ordered": {
            "type": "boolean",
            "description": "Whether element is ordered"
          },
          "allowedInContainers": {
            "type": "boolean",
            "description": "Whether element is allowed to be in container (group)"
          },
          "priorityProperty": {
            "type": "string",
            "description": "Priority property name if element is ordered"
          },
          "reuseReferenceProperty": {
            "type": "string",
            "description": "Reuse element reference property"
          },
          "mandatoryInnerElement": {
            "type": "boolean",
            "description": "Whether inner element existence is mandatory for that container element"
          },
          "parentRestriction": {
            "type": "array",
            "description": "Restricting parent elements with specified types for current element",
            "items": {
              "type": "string"
            }
          },
          "allowedChildren": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Quantity of elements for descriptor",
              "enum": [
                "any",
                "one-or-zero",
                "one-or-many",
                "two-or-many",
                "one"
              ]
            },
            "description": "Restricting parent elements with specified types and quantity of elements of the type for current container element"
          },
          "properties": {
            "$ref": "#/components/schemas/ElementProperties",
            "description": "Element properties"
          },
          "customTabs": {
            "type": "array",
            "description": "List of custom tabs implemented on ui for the element",
            "items": {
              "$ref": "#/components/schemas/CustomTab"
            }
          },
          "deprecated": {
            "type": "boolean",
            "description": "Whether element is deprecated"
          },
          "unsupported": {
            "type": "boolean",
            "description": "Whether element is removed and no longer exists"
          },
          "oldStyleContainer": {
            "type": "boolean",
            "description": "Whether container is old style, where logically nested elements were located outside the container"
          },
          "referencedByAnotherElement": {
            "type": "boolean",
            "description": "Whether element can be referenced by another element by its id"
          },
          "designParameters": {
            "$ref": "#/components/schemas/ElementDesignParameters",
            "description": "Element parameters for chain sequence diagram building"
          },
          "designContainerParameters": {
            "$ref": "#/components/schemas/ElementContainerDesignParameters",
            "description": "Additional element parameters for container elements (with children) for chain sequence diagram building"
          },
          "queryProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ElementProperty"
            }
          },
          "referenceProperties": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ElementProperty"
            }
          }
        }
      },
      "ElementDesignParameters": {
        "description": "Element parameters for chain sequence diagram building",
        "properties": {
          "externalParticipantId": {
            "type": "string",
            "writeOnly": true
          },
          "externalParticipantName": {
            "type": "string",
            "writeOnly": true
          },
          "requestLineTitle": {
            "type": "string",
            "writeOnly": true
          },
          "directionToChain": {
            "type": "boolean",
            "description": "Whether direction is to chain or from it"
          },
          "hasResponse": {
            "type": "boolean",
            "description": "Whether build default \"Response\" line or not"
          },
          "responseAfterRequest": {
            "type": "boolean",
            "description": "Whether response immediately after request or after recursive returning"
          }
        }
      },
      "ElementDiagramOperation": {
        "description": "Operations that can be applied on diagram",
        "properties": {
          "type": {
            "type": "string",
            "description": "Diagram operation type",
            "enum": [
              "DOCUMENT_START",
              "DOCUMENT_END",
              "AUTONUMBER",
              "ACTOR",
              "ACTOR_AS",
              "PARTICIPANT",
              "PARTICIPANT_AS",
              "LINE_WITH_ARROW_SOLID_RIGHT",
              "LINE_WITH_ARROW_DOTTED_RIGHT",
              "LINE_WITH_OPEN_ARROW_SOLID_RIGHT",
              "LINE_WITH_OPEN_ARROW_DOTTED_RIGHT",
              "ACTIVATE",
              "DEACTIVATE",
              "END",
              "START_LOOP",
              "START_ALT",
              "ELSE",
              "START_OPT",
              "START_PAR",
              "PAR_ELSE",
              "START_COLORED_GROUP",
              "START_GROUP",
              "BLOCK_DELIMITER",
              "DELAY"
            ]
          },
          "args": {
            "type": "array",
            "description": "Operation arguments in proper order",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ElementProperties": {
        "description": "Element descriptor properties",
        "properties": {
          "common": {
            "type": "array",
            "description": "List of common properties",
            "items": {
              "$ref": "#/components/schemas/ElementProperty"
            }
          },
          "advanced": {
            "type": "array",
            "description": "List of advanced properties",
            "items": {
              "$ref": "#/components/schemas/ElementProperty"
            }
          },
          "hidden": {
            "type": "array",
            "description": "List of hidden properties",
            "items": {
              "$ref": "#/components/schemas/ElementProperty"
            }
          },
          "async": {
            "type": "array",
            "description": "List of properties for async elements",
            "items": {
              "$ref": "#/components/schemas/ElementProperty"
            }
          }
        }
      },
      "ElementProperty": {
        "description": "Element property definition",
        "properties": {
          "name": {
            "type": "string",
            "description": "Unique name of element property"
          },
          "title": {
            "type": "string",
            "description": "Displayed name of element property"
          },
          "description": {
            "type": "string",
            "description": "Element property description"
          },
          "type": {
            "type": "string",
            "description": "Parameter value type",
            "enum": [
              "string",
              "boolean",
              "number",
              "custom"
            ]
          },
          "uiComponent": {
            "type": "string",
            "description": "Custom ui component needed to show this property"
          },
          "resetValueOnCopy": {
            "type": "boolean",
            "description": "Whether reset property value to default on copy element process is needed"
          },
          "mask": {
            "description": "Parameter value mask (if needed)"
          },
          "unique": {
            "type": "boolean",
            "description": "Indicates whether property value should be unique among element siblings of same type"
          },
          "uniqueAmongElements": {
            "type": "array",
            "description": "Alters value uniqueness check. Property value should be unique among element siblings of specified types.",
            "items": {
              "type": "string"
            }
          },
          "caseInsensitive": {
            "type": "boolean",
            "description": "Whether value uniqueness check should be case-insensitive"
          },
          "mandatory": {
            "type": "boolean",
            "description": "Whether property is mandatory"
          },
          "autofocus": {
            "type": "boolean",
            "description": "Whether autofocus on this property field is needed"
          },
          "query": {
            "type": "boolean",
            "description": "Whether property should be used as query parameter of component URI"
          },
          "allowedValues": {
            "type": "array",
            "description": "List of allowed property values",
            "items": {
              "type": "string"
            }
          },
          "allowCustomValue": {
            "type": "boolean",
            "description": "Whether custom value is allowed (for list properties)"
          },
          "multiple": {
            "type": "boolean",
            "description": "Whether property property could contain multiple values"
          },
          "reference": {
            "type": "boolean",
            "description": "Whether property contains id reference to another element"
          },
          "disabledOnIngressRegistrationOff": {
            "type": "string",
            "description": "Whether this option should be disabled if registration ingress routes on control plane is disabled"
          },
          "validation": {
            "$ref": "#/components/schemas/PropertyValidation",
            "description": "Custom validation logic"
          },
          "default": {
            "type": "string",
            "description": "Parameter default value"
          }
        }
      },
      "LibraryElementGroup": {
        "description": "Group of libraries elements (descriptors)",
        "properties": {
          "groups": {
            "description": "Library elements groups (folders)"
          },
          "elements": {
            "type": "array",
            "description": "Elements (descriptors) list",
            "items": {
              "$ref": "#/components/schemas/ElementDescriptor"
            }
          },
          "childElements": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ElementDescriptor"
            },
            "description": "Map of child element names and descriptors"
          },
          "name": {
            "type": "string",
            "description": "Folder name"
          },
          "title": {
            "type": "string",
            "description": "Folder title"
          },
          "parent": {
            "type": "string",
            "description": "Parent folder (if any)"
          },
          "folder": {
            "description": "Library elements folder"
          }
        }
      },
      "LibraryElements": {
        "description": "Library elements (descriptors of elements) object",
        "properties": {
          "groups": {
            "type": "array",
            "description": "Library elements groups (folders)",
            "items": {
              "$ref": "#/components/schemas/LibraryElementGroup"
            }
          },
          "elements": {
            "type": "array",
            "description": "Elements (descriptors) list",
            "items": {
              "$ref": "#/components/schemas/ElementDescriptor"
            }
          },
          "childElements": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ElementDescriptor"
            },
            "description": "Map of child element names and descriptors"
          }
        }
      },
      "PropertyCondition": {
        "description": "Property validation condition",
        "properties": {
          "property": {
            "type": "string",
            "description": "Property name"
          },
          "equalTo": {
            "type": "string",
            "description": "Value equals to"
          },
          "mandatoryProperties": {
            "type": "array",
            "description": "List of mandatory properties if value is equal to \"equalTo\" field",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PropertyValidation": {
        "description": "Custom validation logic",
        "properties": {
          "anyOf": {
            "type": "array",
            "description": "List of property names for anyOf scenario",
            "items": {
              "type": "string"
            }
          },
          "allOf": {
            "type": "array",
            "description": "List of property names for allOf scenario",
            "items": {
              "type": "string"
            }
          },
          "conditions": {
            "type": "array",
            "description": "List of conditions ",
            "items": {
              "$ref": "#/components/schemas/PropertyCondition"
            }
          }
        }
      },
      "ElementsFilterDTO": {
        "description": "Element descriptor light object",
        "properties": {
          "elementTitle": {
            "type": "string",
            "description": "Element descriptor's title"
          },
          "elementType": {
            "type": "string",
            "description": "Element descriptor's inner type name"
          }
        }
      },
      "FolderContentFilter": {
        "description": "Content filter object for a folder item request",
        "properties": {
          "chainsWithHttpTriggers": {
            "type": "boolean",
            "description": "Whether to show only chains with http trigger in them"
          },
          "externalRoutesOnly": {
            "type": "boolean",
            "description": "Whether to show only chains with at least one external service used"
          },
          "specification": {
            "$ref": "#/components/schemas/SpecificationChain"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "SpecificationChain": {

      },
      "DDSResponse": {
        "description": "Chain detailed design response object",
        "properties": {
          "document": {
            "type": "string",
            "description": "Detailed design main document"
          },
          "simpleSeqDiagramMermaid": {
            "type": "string",
            "description": "Simple sequence diagram (mermaid)"
          },
          "simpleSeqDiagramPlantuml": {
            "type": "string",
            "description": "Simple sequence diagram (plantuml)"
          },
          "triggerSpecifications": {
            "type": "array",
            "description": "HTTP Trigger (Implemented) specifications",
            "items": {
              "$ref": "#/components/schemas/DDSSpecificationSource"
            }
          }
        }
      },
      "DDSSpecificationSource": {
        "description": "Chain detailed design response object",
        "properties": {
          "serviceName": {
            "type": "string",
            "description": "Service name"
          },
          "specificationName": {
            "type": "string",
            "description": "Specification name"
          },
          "specificationId": {
            "type": "string",
            "description": "Specification id"
          },
          "fileExtension": {
            "type": "string",
            "description": "Specification file extension"
          },
          "specificationContent": {
            "type": "string",
            "description": "Service specification source"
          }
        }
      },
      "ChainsBySpecificationGroup": {
        "description": "Chains (without elements) grouped by specification group",
        "properties": {
          "specificationGroupId": {
            "type": "string",
            "description": "Specification group id"
          },
          "chains": {
            "type": "array",
            "description": "List of chains (without elements)",
            "items": {
              "$ref": "#/components/schemas/ChainResponse"
            }
          }
        }
      },
      "MaskedFieldsResponse": {
        "description": "Masked fields set for a chain",
        "properties": {
          "fields": {
            "type": "array",
            "description": "List of masked fields",
            "items": {
              "$ref": "#/components/schemas/MaskedFieldDTO"
            },
            "uniqueItems": true
          }
        }
      },
      "ElementWithChainNameResponse": {
        "description": "Response object for a single element of the chain with chain name",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the entity"
          },
          "name": {
            "type": "string",
            "description": "Name of the entity"
          },
          "description": {
            "type": "string",
            "description": "Entity description"
          },
          "createdWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object creation"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who created that object"
          },
          "modifiedWhen": {
            "type": "integer",
            "format": "int64",
            "description": "Timestamp of object last modification"
          },
          "modifiedBy": {
            "$ref": "#/components/schemas/UserDTO",
            "description": "User who last modified that object"
          },
          "chainId": {
            "type": "string",
            "description": "Chain id"
          },
          "type": {
            "type": "string",
            "description": "Inner element type"
          },
          "parentElementId": {
            "type": "string",
            "description": "Parent element id (container)"
          },
          "originalId": {
            "type": "string",
            "description": "Original id of the element (in case this element is from snapshot - it stores original id which element was copied from)"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {

            },
            "description": "Properties (data) of the element"
          },
          "children": {
            "type": "array",
            "description": "List of element children (if current element is container element)",
            "items": {
              "$ref": "#/components/schemas/ElementResponse"
            }
          },
          "swimlaneId": {
            "type": "string",
            "description": "Swimlane id which this element belongs to (if any)"
          },
          "mandatoryChecksPassed": {
            "type": "boolean",
            "description": "Whether element is configured correctly"
          },
          "chainName": {
            "type": "string",
            "description": "Chain name"
          }
        }
      },
      "UsedProperty": {
        "description": "Exchange property",
        "properties": {
          "name": {
            "type": "string",
            "description": "Property name"
          },
          "source": {
            "type": "string",
            "description": "Property source",
            "enum": [
              "HEADER",
              "EXCHANGE_PROPERTY"
            ]
          },
          "type": {
            "type": "string",
            "description": "Property type",
            "enum": [
              "STRING",
              "NUMBER",
              "BOOLEAN",
              "OBJECT",
              "UNKNOWN_TYPE"
            ]
          },
          "attributeDataType": {
            "type": "object",
            "additionalProperties": {

            },
            "description": "Map of attribute data types in case of complex object property"
          },
          "relatedElements": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/UsedPropertyElement"
            },
            "description": "Map of \u003Cproperty name + property source\u003E and property element response object"
          },
          "isArray": {
            "type": "boolean",
            "description": "Whether property is an array"
          }
        }
      },
      "UsedPropertyElement": {
        "description": "Exchange property with element using it",
        "properties": {
          "id": {
            "type": "string",
            "description": "Element id"
          },
          "name": {
            "type": "string",
            "description": "Element name"
          },
          "type": {
            "type": "string",
            "description": "Inner element type"
          },
          "operations": {
            "type": "array",
            "description": "Operations for a property used in this element",
            "items": {
              "type": "string",
              "description": "Operation for a property used in this element",
              "enum": [
                "GET",
                "SET"
              ]
            },
            "uniqueItems": true
          }
        }
      },
      "UsedSystem": {
        "description": "Service and specifications used by a chain",
        "properties": {
          "systemId": {
            "type": "string",
            "description": "Service id"
          },
          "usedSystemModelIds": {
            "type": "array",
            "description": "Specification ids",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ChainsCountResponse": {
        "description": "Chain count response object",
        "properties": {
          "chainsCount": {
            "type": "integer",
            "format": "int64",
            "description": "Chains count"
          }
        }
      },
      "DeleteInstructionsRequest": {
        "description": "Delete import instructions request object",
        "properties": {
          "chains": {
            "type": "array",
            "description": "Ids of chain import instructions to delete",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          },
          "services": {
            "type": "array",
            "description": "Ids of service import instructions to delete",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        }
      }
    }
  }
}
